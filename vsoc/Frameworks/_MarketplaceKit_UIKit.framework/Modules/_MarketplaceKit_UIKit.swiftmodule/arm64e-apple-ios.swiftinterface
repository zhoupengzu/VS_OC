// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 (swiftlang-6.0.3.1.6 clang-1600.0.30.1)
// swift-module-flags: -target arm64e-apple-ios18.2 -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -library-level api -enable-upcoming-feature InternalImportsByDefault -enable-upcoming-feature InternalImportsByDefault -enable-upcoming-feature ExistentialAny -user-module-version 2.2.32.2.4 -module-name _MarketplaceKit_UIKit
public import LocalAuthentication
@_exported public import MarketplaceKit
public import Swift
public import UIKit
public import _Concurrency
public import _StringProcessing
public import _SwiftConcurrencyShims
@objc @_hasMissingDesignatedInitializers @available(iOS 17.4, *)
@_Concurrency.MainActor @preconcurrency public class ActionButton : UIKit.UIControl {
  public enum Action {
    case batchInstall(_MarketplaceKit_UIKit.BatchInstallConfiguration)
    case delete(MarketplaceKit.AppleItemID)
    case install(_MarketplaceKit_UIKit.InstallConfiguration)
    case launch(MarketplaceKit.AppleItemID)
  }
  public enum ButtonImagePlacement : Swift.Int {
    case top
    case leading
    case bottom
    case trailing
    public init?(rawValue: Swift.Int)
    @available(iOS 17.4, *)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency final public let action: _MarketplaceKit_UIKit.ActionButton.Action
  @_Concurrency.MainActor @preconcurrency public init(action: _MarketplaceKit_UIKit.ActionButton.Action)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var label: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var imageName: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var imagePlacement: _MarketplaceKit_UIKit.ActionButton.ButtonImagePlacement {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var size: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var fontSize: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var cornerRadius: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var borderWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var borderColor: UIKit.UIColor {
    get
    set
  }
  @objc deinit
}
@available(iOS 17.4, *)
public enum MarketplaceDisplayOption : Swift.Codable {
  case productPage(appleItemID: MarketplaceKit.AppleItemID, appleVersionID: MarketplaceKit.AppleVersionID?)
  case searchResults(query: Swift.String)
  case authentication(account: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 17.4, *)
public protocol MarketplaceSceneDelegate {
  func scene(_ scene: UIKit.UIWindowScene, askedToDisplay option: _MarketplaceKit_UIKit.MarketplaceDisplayOption)
}
@available(iOS 17.4, *)
extension UIKit.UIScene.ConnectionOptions {
  @_Concurrency.MainActor @preconcurrency public var marketplaceDisplayOption: _MarketplaceKit_UIKit.MarketplaceDisplayOption? {
    get
  }
}
@available(iOS 17.4, *)
public enum InstallConfirmationResult : @unchecked Swift.Sendable {
  case cancel
  case confirmed(installVerificationToken: Swift.String, authenticationContext: LocalAuthentication.LAContext?)
}
@available(iOS 17.4, *)
public struct InstallConfiguration {
  public let install: _MarketplaceKit_UIKit.InstallMetadata
  public let confirmInstall: @Sendable () async -> _MarketplaceKit_UIKit.InstallConfirmationResult
  public init(install: _MarketplaceKit_UIKit.InstallMetadata, confirmInstall: @escaping @Sendable () async -> _MarketplaceKit_UIKit.InstallConfirmationResult)
}
@available(iOS 17.4, *)
public struct InstallMetadata : Swift.Sendable {
  public let account: Swift.String
  public let appleItemID: MarketplaceKit.AppleItemID
  public let alternativeDistributionPackage: Foundation.URL
  public let isUpdate: Swift.Bool
  @available(iOS 18.0, *)
  public var appShareURL: Foundation.URL?
  public init(account: Swift.String, appleItemID: MarketplaceKit.AppleItemID, alternativeDistributionPackage: Foundation.URL, isUpdate: Swift.Bool)
}
@available(iOS 17.4, *)
public enum BatchInstallConfirmationResult : Swift.Equatable, @unchecked Swift.Sendable {
  case cancel
  case confirmed(installVerificationTokens: [MarketplaceKit.AppleItemID : Swift.String], authenticationContext: LocalAuthentication.LAContext?)
  public static func == (a: _MarketplaceKit_UIKit.BatchInstallConfirmationResult, b: _MarketplaceKit_UIKit.BatchInstallConfirmationResult) -> Swift.Bool
}
@available(iOS 17.4, *)
public struct BatchInstallConfiguration {
  public let installs: [_MarketplaceKit_UIKit.InstallMetadata]
  public let confirmInstall: @Sendable () async -> _MarketplaceKit_UIKit.BatchInstallConfirmationResult
  public init(installs: [_MarketplaceKit_UIKit.InstallMetadata], confirmInstall: @escaping @Sendable () async -> _MarketplaceKit_UIKit.BatchInstallConfirmationResult)
}
@available(iOS 17.4, *)
extension _MarketplaceKit_UIKit.ActionButton.ButtonImagePlacement : Swift.Equatable {}
@available(iOS 17.4, *)
extension _MarketplaceKit_UIKit.ActionButton.ButtonImagePlacement : Swift.Hashable {}
@available(iOS 17.4, *)
extension _MarketplaceKit_UIKit.ActionButton.ButtonImagePlacement : Swift.RawRepresentable {}
